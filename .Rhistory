predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
predictData<-data.frame(y=vowel.test$y,predict1,predict2)
combModFit<-train(y~.,method="gam",data=predictData)
predict<-predict(combModFit,predictData)
confusionMatrix(predict,vowel.test$y)
predict
str(predict)
str(predict1)
str(vowel.test$y)
combModFit
qplot(predict1,predict2,data=predictData)
table(predict1,predict2)
tail(predict)
tail(predictData)
str(predictData)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
sum(predict$equal)/nrow(predict)
sum(predictData$predict1==)predictData$predict2/nrow(predict)
sum(predictData$predict1==predictData$predict2)/nrow(predict)
sum(predictData$predict1==predictData$predict2)/nrow(predictData)
sum(predictData$predict1==predictData$predict2==y)/nrow(predictData)
sum((predictData$predict1==predictData$predict2) & (predictData$predict1==y))/nrow(predictData)
sum((predictData$predict1==predictData$predict2) && (predictData$predict1==y))/nrow(predictData)
sum(predictData$predict1==predictData$predict2 & predictData$predict1==predictData$y)/nrow(predictData)
table(predict1,predict2)
sum(predictData$predict1==predictData$predict2)
sum(predictData$predict1==predictData$predict2)/nrow(predictData)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
library(caret)
set.seed(33833)
modFit1<-train(y~.,method="rf",data=vowel.train)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
sum(predictData$predict1==predictData$predict2)/nrow(predictData)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFitRF<-train(diagnosis~.,method="rf",data=training)
modFitGBM<-train(diagnosis~.,method="gbm",data=training)
modFitLDA<-train(diagnosis~.,method="lda",data=training)
predDF<-data.frame(predictRF,predictGBM,predictLDA,diagnosis=testing$diagnosis)
predictRF   <-predict(modFitRF,newdata=testing)
predictGBM  <-predict(modFitGBM,newdata=testing)
predictLDA  <-predict(modFitLDA,newdata=testing)
predDF<-data.frame(predictRF,predictGBM,predictLDA,diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predDF)
combPredict<-predict(combModFit,predDF)
confusionMatrix(predictRF,testing$diagnosis)
confusionMatrix(predictGBM,testing$diagnosis)
confusionMatrix(predictLDA,testing$diagnosis)
confusionMatrix(combPredict,testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitRF<-train(diagnosis~.,method="rf",data=training)
modFitGBM<-train(diagnosis~.,method="gbm",data=training)
modFitLDA<-train(diagnosis~.,method="lda",data=training)
predictRF   <-predict(modFitRF,newdata=testing)
predictGBM  <-predict(modFitGBM,newdata=testing)
predictLDA  <-predict(modFitLDA,newdata=testing)
predDF<-data.frame(predictRF,predictGBM,predictLDA,diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predDF)
combPredict<-predict(combModFit,predDF)
combModFit<-train(diagnosis~.,method="rf",data=predDF)
head(predDF)
?train
library(gbm)
predictTrainingRF   <-predict(modFitRF,newdata=training)
predictTrainingGBM  <-predict(modFitGBM,newdata=training)
predictTrainingLDA  <-predict(modFitLDA,newdata=training)
predictTestingRF   <-predict(modFitRF,newdata=testing)
predictTestingGBM  <-predict(modFitGBM,newdata=testing)
predictTestingLDA  <-predict(modFitLDA,newdata=testing)
predictTrainingDF<-data.frame(predictTrainingRF,predictTrainingGBM,predictTrainingLDA,diagnosis=training$diagnosis)
predictTestingDF<-data.frame(predictTestingRF,predictTestingGBM,predictTestingLDA,diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predictTrainingDF)
combPredict<-predict(combModFit,predictTestingDF)
confusionMatrix(combPredict,testing$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predictTrainingDF)
combPredict<-predict(combModFit,predictTestingDF)
combPredict
confusionMatrix(combPredict,testing$diagnosis)
testing$diagnosis
combPredict
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitRF<-train(diagnosis~.,method="rf",data=training)
modFitGBM<-train(diagnosis~.,method="gbm",data=training)
modFitLDA<-train(diagnosis~.,method="lda",data=training)
predictTrainingRF   <-predict(modFitRF,newdata=training)
predictTrainingGBM  <-predict(modFitGBM,newdata=training)
predictTrainingLDA  <-predict(modFitLDA,newdata=training)
predictTrainingDF<-data.frame(predictTrainingRF,predictTrainingGBM,predictTrainingLDA,diagnosis=training$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predictTrainingDF)
predictTestingRF   <-predict(modFitRF,newdata=testing)
predictTestingGBM  <-predict(modFitGBM,newdata=testing)
predictTestingLDA  <-predict(modFitLDA,newdata=testing)
predictTestingDF<-data.frame(predictTestingRF,predictTestingGBM,predictTestingLDA,diagnosis=testing$diagnosis)
combPredict<-predict(combModFit,predictTestingDF)
confusionMatrix(combPredict,testing$diagnosis)
str(combPredict)
str(combPredict)
str(testing$diagnosis)
nrow(combPredict)
nrow(testing$diagnosis)
lenght(combPredict)
lenght(testing$diagnosis)
class(combPredict)
class(testing$diagnosis)
length(combPredict)
length(testing$diagnosis)
length(combPredict)
length(testing$diagnosis)
length(combPredict)
length(testing$diagnosis)
nrow(training)
nrow(testing)
nrow(predictTestingDF)
combPredict<-predict(combModFit,predictTestingDF)
combPredict<-predict(combModFit,newdata=predictTestingDF)
nrow(predictTestingDF)
nrow(combModFit)
length(combModFit)
combModFit
predictTrainingDF<-data.frame(predictTrainingRF,predictTrainingGBM,predictTrainingLDA,diagnosis=training$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predictTrainingDF)
predictTestingRF   <-predict(modFitRF,newdata=testing)
predictTestingGBM  <-predict(modFitGBM,newdata=testing)
predictTestingLDA  <-predict(modFitLDA,newdata=testing)
predictTestingDF<-data.frame(predictTestingRF,predictTestingGBM,predictTestingLDA,diagnosis=testing$diagnosis)
combPredict<-predict(combModFit,newdata=predictTestingDF)
predictTestingDF<-data.frame(predictTestingRF,predictTestingGBM,predictTestingLDA)
combPredict<-predict(combModFit,newdata=predictTestingDF)
str(predictTestingDF)
predictTestingDF<-data.frame(predictTestingRF,predictTestingGBM,predictTestingLDA,diagnosis=testing$diagnosis)
str(predictTestingDF)
predictTrainingDF<-data.frame(predictRF=predictTrainingRF,predictGBM=predictTrainingGBM,predictLDA=predictTrainingLDA,diagnosis=training$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predictTrainingDF)
predictTestingDF<-data.frame(predictRF=predictTestingRF,predictGBM=predictTestingGBM,predictLDA=predictTestingLDA,diagnosis=testing$diagnosis)
combPredict<-predict(combModFit,newdata=predictTestingDF)
confusionMatrix(combPredict,testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitRF<-train(diagnosis~.,method="rf",data=training)
modFitGBM<-train(diagnosis~.,method="gbm",data=training)
modFitLDA<-train(diagnosis~.,method="lda",data=training)
predictTrainingRF   <-predict(modFitRF,newdata=training)
predictTrainingGBM  <-predict(modFitGBM,newdata=training)
predictTrainingLDA  <-predict(modFitLDA,newdata=training)
predictTrainingDF<-data.frame(predictRF=predictTrainingRF,predictGBM=predictTrainingGBM,predictLDA=predictTrainingLDA,diagnosis=training$diagnosis)
combModFit<-train(diagnosis~.,method="rf",data=predictTrainingDF)
predictTestingRF   <-predict(modFitRF,newdata=testing)
predictTestingGBM  <-predict(modFitGBM,newdata=testing)
predictTestingLDA  <-predict(modFitLDA,newdata=testing)
predictTestingDF<-data.frame(predictRF=predictTestingRF,predictGBM=predictTestingGBM,predictLDA=predictTestingLDA,diagnosis=testing$diagnosis)
combPredict<-predict(combModFit,newdata=predictTestingDF)
confusionMatrix(predictRF,testing$diagnosis)
confusionMatrix(predictGBM,testing$diagnosis)
confusionMatrix(predictLDA,testing$diagnosis)
confusionMatrix(combPredict,testing$diagnosis)
confusionMatrix(predictRF,testing$diagnosis)
confusionMatrix(predictGBM,testing$diagnosis)
confusionMatrix(predictLDA,testing$diagnosis)
confusionMatrix(combPredict,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
??plot.enet
install.packages("plot.enet")
install.packages("elasticnet")
?plot.enet
install.packages("enet")
library(elasticnet)
?plot.enet
modFi3<-train(CompressiveStrength~.,method="lda",data=training)
modFi3<-train(CompressiveStrength~.,method="lasso",data=training)
plot.enet(modFi3,training$CompressiveStrength)
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
modFit3<-train(CompressiveStrength~.,method="lasso",data=training)
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
legend(attributes(model$finalModel))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE,legend=attributes(model$finalModel))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE,legend=attributes(modFit3$finalModel))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
legend(attributes(modFit3$finalModel))
par(mfrow=c(2,2))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
par(mfrow=c(1,1))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
attributes(modFit3$finalModel)
?plot.enet
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
??bats
install.packages("forecast")
library(forecast)
?bats
head(testing)
?ts
?bats
bats(testing$visitsTumblr)
forecast<-bats(testing$visitsTumblr)
str(forecast)
forecast2<-predict(forecast,testing)
tstest = ts(testing$visitsTumblr)
forecast<-bats(tstrain)
forecast2<-predict(forecast,tstest)
forecast2<-forecast(forecast,tstest)
?forecast
forecast2<-forecast(forecast)
model<-bats(tstrain)
forecast<-forecast(model)
str(forecast)
plot(forecast);
lines(tstest,col='red')
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
model<-bats(tstrain)
forecast<-forecast(model)
plot(forecast);
lines(tstest,col='red')
head(testing)
testing
?forecast
forecast<-forecast(model,600)
plot(forecast);
training
lines(tstest,col="red")
lines(rbind(tstrain,tstest,col="red")
lines(rbind(tstrain,tstest),col="red")
lines(rbind(tstrain,tstest),col="red")
plot(forecast);
lines(rbind(tstrain,tstest),col="red")
nrow(testing)
nrow(training)
nrow(testing)
forecast<-forecast(model,235)
plot(forecast);
lines(rbind(tstrain,tstest),col="red")
lines(tstest,col="red")
str(tstrain)
ts=ts(dat$visitsTumblr)
plot(forecast);
lines(ts,col="red")
str(forecast)
?forecast
forecast$level
forecast$lower
forecast$upper
data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$uppder[,2]))
data.frame(forecast$lower[,2],forecast$upper[,2],tstest)
data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$uppder[,2]))
data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$upper[,2]))
prediction<-data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$upper[,2]))
nrow(prediction)
sum(prediction$inside)/nrow(prediction)
forecast<-forecast(model,235)
plot(forecast);
lines(ts,col="red")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?svm
set.seed(325)
fitModel5<-svm(CompressiveStrength~.,data=training)
predictModel5<-predict(fitModel5,newdata=testing)
summary(RMSE)
summary(predictModel5)
predictModel5
sqrt(sum((predictModel5=testing$CompressiveStrength)^2))
RMSE=sqrt(sum((predictModel5=testing$CompressiveStrength)^2))
RMSE
accuracy(forecast,tstest)
RMSE=sqrt(sum((predictModel5=testing$CompressiveStrength)^2))/lenght(testing)
RMSE
lenght(testing)
length(testing)
RMSE=sqrt(sum((predictModel5=testing$CompressiveStrength)^2))/length(testing)
RMSE
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))
RMSE
predictModel5
testing$CompressiveStrength
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fitModel5<-svm(CompressiveStrength~.,data=training)
predictModel5<-predict(fitModel5,newdata=testing)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))
RMSE
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
ts=ts(dat$visitsTumblr)
model<-bats(tstrain)
forecast<-forecast(model,235)
plot(forecast); lines(ts,col="red")
accuracy(forecast,tstest)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))/nrow(testing)
RMSE
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fitModel5<-svm(CompressiveStrength~.,data=training)
predictModel5<-predict(fitModel5,newdata=testing)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))/nrow(testing)
RMSE
nrow(testing)
length(predictModel5)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))/length(predictModel5)
RMSE
accuracy(predictModel5,testing$CompressiveStrength)
RMSE<-accuracy(predictModel5,testing$CompressiveStrength)[,2]
RMSE
RMSE<-sqrt(sum((predictModel5 - testing$CompressiveStrength)^2))
RMSE
RMSE<-mean(sum((predictModel5 - testing$CompressiveStrength)^2))
RMSE
RMSE<-sqrt(mean((predictModel5 - testing$CompressiveStrength)^2))
RMSE
RMSE<-sqrt(sum((predictModel5 - testing$CompressiveStrength)^2)/nrow(predictModel5))
RMSE
nrow(predictModel5)
nrow(testing)
RMSE<-sqrt(sum((predictModel5 - testing$CompressiveStrength)^2)/nrow(testing))
RMSE
accuracy(forecast,tstest)
forecast
str(forecast)
accuracy(forecast$fitted.values,tstest)
accuracy(forecast$mean,tstest)
?accuracy
tstest
accuracy(forecast,tstest)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
ts=ts(dat$visitsTumblr)
model<-bats(tstrain)
forecast<-forecast(model,235)
accuracy(forecast,tstest)
nrow(tstrain)
nrow(tstest)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
nrow(tstrain)
nrow(tstest)
nrow(training)
nrow(testing)
tstrainW<-window(tstrain,start=1,end=365)
tstestW<-window(tstest,start=366,end=(365+235))
tstestW<-window(tstest,start=366,end=500)
tstestW<-window(tstest,start=365,end=500)
tstestW<-window(tstest,start=365,end=(500-0.01))
tstrainW<-window(tstrain,start=1,end=1)
tstestW<-window(tstest,start=2,end=(2-0.01))
tstrainW<-window(tstrain,start=1,end=1)
tstestW<-window(tstest,start=2,end=(2-0.01))
tstestW<-window(tstest,start=1,end=(2-0.01))
?window
tstrainW<-window(tstrain,start=1,end=1)
tstestW<-window(tstest,start=1,end=2)
forecast<-forecast(model,1)
forecast<-forecast(model,1)
accuracy(forecast,tstest)
forecast<-forecast(model,1)
accuracy(forecast,tstest)
forecast<-forecast(model,2)
accuracy(forecast,tstest)
plot(forecast); lines(ts,col="red")
training
testing
tstrainW<-window(tstrain,start=1,end=365)
tstestW<-window(tstest,start=366,end=600)
tstestW<-window(tstest,start=1,end=235)
forecast<-forecast(model,235)
accuracy(forecast,tstest)
forecast
accuracy(forecast[366:600,],tstest)
tstest
forecast[366:600,]
forecast[366:600,]
forecast$fitted
tsdat=ts(testing$visitsTumblr)
head(tsdat)
tstrainW<-window(tsdat,start=1,end=365)
tstestW<-window(tsdat,start=366,end=600)
tstrainW<-window(tsdat,start=1,end=365)
tsdat
tsdat=ts(dat$visitsTumblr)
tstrainW<-window(tsdat,start=1,end=365)
tstestW<-window(tsdat,start=366,end=600)
model<-bats(tstrainW)
forecast<-forecast(model,235)
plot(forecast); lines(tstestW,col="red")
accuracy(forecast,tstestW)
prediction<-data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$upper[,2]))
sum(prediction$inside)/nrow(prediction)
tstrainW
tstestW
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
library(caret)
set.seed(33833)
modFit1<-train(y~.,method="rf",data=vowel.train)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
sum(predictData$predict1==predictData$predict2)/nrow(predictData)
library(caret)
set.seed(33833)
modFit1<-train(y~.,method="rf",data=vowel.train)
set.seed(33833)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modFit1<-train(y~.,method="rf",data=vowel.train)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
setwd("~/Dropbox/Rfiles/ReproducibleResearch/RepData_PeerAssessment1")
